_USES_ALLOCATOR_H	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^#define _USES_ALLOCATOR_H 1$/;"	macro	line:26
std	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	namespace	line:35
__erased_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  struct __erased_type { };$/;"	struct	line:39	namespace:std
__is_erased_or_convertible	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Alloc, typename _Tp>     using __is_erased_or_convertible $/;"	member	line:42	namespace:std	typeref:class:__is_erased_or_convertible
allocator_arg_t	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  struct allocator_arg_t { explicit allocator_arg_t() = default; };$/;"	struct	line:46	namespace:std
allocator_arg_t	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  struct allocator_arg_t { explicit allocator_arg_t() = default; };$/;"	prototype	line:46	struct:std::allocator_arg_t	access:public	signature:()	returns:explicit 
allocator_arg	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  _GLIBCXX17_INLINE constexpr allocator_arg_t allocator_arg =$/;"	member	line:48	namespace:std
__uses_allocator_helper	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc, typename = __void_t<>>     struct __uses_allocator_helper $/;"	struct	line:52	namespace:std	inherits:false_type
__uses_allocator_helper	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc>     struct __uses_allocator_helper<_Tp, _Alloc, $/;"	struct	line:56	namespace:std	inherits:__is_erased_or_convertible<_Alloc,typename_Tp::allocator_type>::type
uses_allocator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc>     struct uses_allocator $/;"	struct	line:63	namespace:std	inherits:__uses_allocator_helper<_Tp,_Alloc>::type
__uses_alloc_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  struct __uses_alloc_base { };$/;"	struct	line:67	namespace:std
__uses_alloc0	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  struct __uses_alloc0 : __uses_alloc_base$/;"	struct	line:69	namespace:std	inherits:__uses_alloc_base
_Sink	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^    struct _Sink { void operator=(const void*) { } } _M_a;$/;"	struct	line:71	struct:std::__uses_alloc0	access:public
operator =	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^    struct _Sink { void operator=(const void*) { } } _M_a;$/;"	function	line:71	struct:std::__uses_alloc0::_Sink	access:public	signature:(const void*)	returns:void 
_M_a	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^    struct _Sink { void operator=(const void*) { } } _M_a;$/;"	member	line:71	struct:std::__uses_alloc0	typeref:struct:std::__uses_alloc0::_Sink	access:public
__uses_alloc1	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Alloc>     struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; }; $/;"	struct	line:75	namespace:std	inherits:__uses_alloc_base
_M_a	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };$/;"	member	line:75	struct:std::__uses_alloc1	access:public
__uses_alloc2	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Alloc>     struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; }; $/;"	struct	line:78	namespace:std	inherits:__uses_alloc_base
_M_a	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };$/;"	member	line:78	struct:std::__uses_alloc2	access:public
__uses_alloc	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc, typename... _Args>     struct __uses_alloc<true, _Tp, _Alloc, _Args...> $/;"	struct	line:84	namespace:std	inherits:conditional<is_constructible<_Tp,allocator_arg_t,_Alloc,_Args...>::value,__uses_alloc1<_Alloc>,__uses_alloc2<_Alloc>>::type
static_assert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^      static_assert(__or_<$/;"	prototype	line:90	struct:std::__uses_alloc	access:public	signature:(__or_< is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>, is_constructible<_Tp, _Args..., _Alloc>>::value, "construction with" " an allocator must be possible if uses_allocator is true")
__uses_alloc	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc, typename... _Args>     struct __uses_alloc<false, _Tp, _Alloc, _Args...> $/;"	struct	line:97	namespace:std	inherits:__uses_alloc0
__uses_alloc_t	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc, typename... _Args>     using __uses_alloc_t = $/;"	member	line:101	namespace:std	typeref:class:__uses_alloc_t
__use_alloc	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc, typename... _Args>     inline __uses_alloc_t<_Tp, _Alloc, _Args...>     __use_alloc(const _Alloc& __a) $/;"	function	line:106	namespace:std	signature:(const _Alloc& __a)	returns:template inline __uses_alloc_t <_Tp, _Alloc, _Args...> 
__use_alloc	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc, typename... _Args>     void     __use_alloc(const _Alloc&&) = delete; $/;"	prototype	line:115	namespace:std	signature:(const _Alloc&&)	returns:template void 
uses_allocator_v	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template <typename _Tp, typename _Alloc>     inline constexpr bool uses_allocator_v = $/;"	member	line:119	namespace:std
__is_uses_allocator_predicate	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<template<typename...> class _Predicate, 	   typename _Tp, typename _Alloc, typename... _Args>     struct __is_uses_allocator_predicate $/;"	struct	line:125	namespace:std	inherits:conditional<uses_allocator<_Tp,_Alloc>::value,__or_<_Predicate<_Tp,allocator_arg_t,_Alloc,_Args...>,_Predicate<_Tp,_Args...,_Alloc>>,_Predicate<_Tp,_Args...>>::type
__is_uses_allocator_constructible	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc, typename... _Args>     struct __is_uses_allocator_constructible $/;"	struct	line:132	namespace:std	inherits:__is_uses_allocator_predicate<is_constructible,_Tp,_Alloc,_Args...>
__is_uses_allocator_constructible_v	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc, typename... _Args>     _GLIBCXX17_INLINE constexpr bool __is_uses_allocator_constructible_v = $/;"	member	line:138	namespace:std
__is_nothrow_uses_allocator_constructible	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc, typename... _Args>     struct __is_nothrow_uses_allocator_constructible $/;"	struct	line:143	namespace:std	inherits:__is_uses_allocator_predicate<is_nothrow_constructible,_Tp,_Alloc,_Args...>
__is_nothrow_uses_allocator_constructible_v	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc, typename... _Args>     _GLIBCXX17_INLINE constexpr bool     __is_nothrow_uses_allocator_constructible_v = $/;"	member	line:152	namespace:std
__uses_allocator_construct_impl	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename... _Args>     void __uses_allocator_construct_impl(__uses_alloc0 __a, _Tp* __ptr, $/;"	function	line:157	namespace:std	signature:(__uses_alloc0 __a, _Tp* __ptr, _Args&&... __args)	returns:template void 
__uses_allocator_construct_impl	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc, typename... _Args>     void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp* __ptr, $/;"	function	line:162	namespace:std	signature:(__uses_alloc1<_Alloc> __a, _Tp* __ptr, _Args&&... __args)	returns:template void 
__uses_allocator_construct_impl	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc, typename... _Args>     void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp* __ptr, $/;"	function	line:170	namespace:std	signature:(__uses_alloc2<_Alloc> __a, _Tp* __ptr, _Args&&... __args)	returns:template void 
__uses_allocator_construct	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\uses_allocator.h	/^  template<typename _Tp, typename _Alloc, typename... _Args>     void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr, $/;"	function	line:175	namespace:std	signature:(const _Alloc& __a, _Tp* __ptr, _Args&&... __args)	returns:template void 
